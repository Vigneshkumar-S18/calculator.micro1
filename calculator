<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Calculator</title>
    <style>
        :root {
            --primary: #3498db;
            --secondary: #2ecc71;
            --dark: #2c3e50;
            --light: #ecf0f1;
            --danger: #e74c3c;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }

        .calculator {
            width: 100%;
            max-width: 350px;
            background-color: white;
            border-radius: 20px;
            box-shadow: var(--shadow);
            overflow: hidden;
        }

        .display {
            padding: 20px;
            text-align: right;
            background-color: var(--dark);
            color: white;
            position: relative;
        }

        .display .previous-operand {
            font-size: 1rem;
            color: rgba(255, 255, 255, 0.7);
            height: 1.5rem;
            overflow: hidden;
        }

        .display .current-operand {
            font-size: 2.5rem;
            margin-top: 0.5rem;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .buttons {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1px;
            background-color: #ddd;
        }

        button {
            border: none;
            outline: none;
            padding: 20px;
            font-size: 1.2rem;
            cursor: pointer;
            transition: all 0.2s ease;
            background-color: white;
        }

        button:hover {
            background-color: #f0f0f0;
        }

        button:active {
            transform: scale(0.95);
        }

        .operator {
            background-color: var(--light);
            color: var(--primary);
            font-weight: bold;
        }

        .equals {
            background-color: var(--primary);
            color: white;
        }

        .equals:hover {
            background-color: #2980b9;
        }

        .clear, .delete {
            color: var(--danger);
        }

        .span-2 {
            grid-column: span 2;
        }

        @media (max-width: 400px) {
            button {
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="calculator">
        <div class="display">
            <div class="previous-operand"></div>
            <div class="current-operand">0</div>
        </div>
        <div class="buttons">
            <button class="clear span-2">AC</button>
            <button class="delete">DEL</button>
            <button class="operator">÷</button>
            
            <button>7</button>
            <button>8</button>
            <button>9</button>
            <button class="operator">×</button>
            
            <button>4</button>
            <button>5</button>
            <button>6</button>
            <button class="operator">-</button>
            
            <button>1</button>
            <button>2</button>
            <button>3</button>
            <button class="operator">+</button>
            
            <button class="span-2">0</button>
            <button>.</button>
            <button class="equals">=</button>
        </div>
    </div>

    <script>
        class Calculator {
            constructor(previousOperandElement, currentOperandElement) {
                this.previousOperandElement = previousOperandElement;
                this.currentOperandElement = currentOperandElement;
                this.clear();
            }

            clear() {
                this.currentOperand = '0';
                this.previousOperand = '';
                this.operation = undefined;
            }

            delete() {
                this.currentOperand = this.currentOperand.toString().slice(0, -1);
                if (this.currentOperand === '') {
                    this.currentOperand = '0';
                }
            }

            appendNumber(number) {
                if (number === '.' && this.currentOperand.includes('.')) return;
                if (this.currentOperand === '0' && number !== '.') {
                    this.currentOperand = number;
                } else {
                    this.currentOperand = this.currentOperand.toString() + number.toString();
                }
            }

            chooseOperation(operation) {
                if (this.currentOperand === '') return;
                if (this.previousOperand !== '') {
                    this.compute();
                }
                this.operation = operation;
                this.previousOperand = this.currentOperand;
                this.currentOperand = '';
            }

            compute() {
                let computation;
                const prev = parseFloat(this.previousOperand);
                const current = parseFloat(this.currentOperand);
                if (isNaN(prev) || isNaN(current)) return;

                switch (this.operation) {
                    case '+':
                        computation = prev + current;
                        break;
                    case '-':
                        computation = prev - current;
                        break;
                    case '×':
                        computation = prev * current;
                        break;
                    case '÷':
                        computation = prev / current;
                        break;
                    default:
                        return;
                }

                this.currentOperand = computation;
                this.operation = undefined;
                this.previousOperand = '';
            }

            updateDisplay() {
                this.currentOperandElement.innerText = this.currentOperand;
                if (this.operation != null) {
                    this.previousOperandElement.innerText = 
                        `${this.previousOperand} ${this.operation}`;
                } else {
                    this.previousOperandElement.innerText = '';
                }
            }
        }

        const numberButtons = document.querySelectorAll('button:not(.operator):not(.equals):not(.clear):not(.delete)');
        const operatorButtons = document.querySelectorAll('.operator');
        const equalsButton = document.querySelector('.equals');
        const clearButton = document.querySelector('.clear');
        const deleteButton = document.querySelector('.delete');
        const previousOperandElement = document.querySelector('.previous-operand');
        const currentOperandElement = document.querySelector('.current-operand');

        const calculator = new Calculator(previousOperandElement, currentOperandElement);

        numberButtons.forEach(button => {
            button.addEventListener('click', () => {
                calculator.appendNumber(button.innerText);
                calculator.updateDisplay();
            });
        });

        operatorButtons.forEach(button => {
            button.addEventListener('click', () => {
                calculator.chooseOperation(button.innerText);
                calculator.updateDisplay();
            });
        });

        equalsButton.addEventListener('click', () => {
            calculator.compute();
            calculator.updateDisplay();
        });

        clearButton.addEventListener('click', () => {
            calculator.clear();
            calculator.updateDisplay();
        });

        deleteButton.addEventListener('click', () => {
            calculator.delete();
            calculator.updateDisplay();
        });
    </script>
</body>
</html>


