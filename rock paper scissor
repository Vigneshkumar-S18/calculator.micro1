<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rock Paper Scissors</title>
    <style>
        :root {
            --primary: #6c5ce7;
            --secondary: #a29bfe;
            --dark: #2d3436;
            --light: #f5f6fa;
            --rock: #e17055;
            --paper: #00cec9;
            --scissors: #fd79a8;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background-color: var(--light);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
            color: var(--dark);
        }

        h1 {
            margin-bottom: 30px;
            font-size: 2.5rem;
            color: var(--primary);
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }

        .game-container {
            width: 100%;
            max-width: 800px;
            background-color: white;
            border-radius: 20px;
            box-shadow: var(--shadow);
            padding: 30px;
            text-align: center;
        }

        .score-board {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
        }

        .score {
            background-color: var(--primary);
            color: white;
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 1.2rem;
            box-shadow: var(--shadow);
        }

        .choices {
            display: flex;
            justify-content: space-around;
            margin-bottom: 30px;
        }

        .choice {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 3rem;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: var(--shadow);
            position: relative;
            overflow: hidden;
        }

        .choice::before {
            content: '';
            position: absolute;
            top: -10px;
            left: -10px;
            right: -10px;
            bottom: -10px;
            border-radius: 50%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.3), transparent);
            transform: rotate(0deg);
            transition: var(--transition);
        }

        .choice:hover::before {
            transform: rotate(180deg);
        }

        .choice.rock {
            background-color: var(--rock);
            color: white;
        }

        .choice.paper {
            background-color: var(--paper);
            color: white;
        }

        .choice.scissors {
            background-color: var(--scissors);
            color: white;
        }

        .choice:hover {
            transform: translateY(-5px);
        }

        .choice:active {
            transform: scale(0.95);
        }

        .result {
            margin: 30px 0;
            font-size: 1.5rem;
            min-height: 50px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .result-text {
            font-weight: bold;
            color: var(--primary);
        }

        .computer-choice {
            font-size: 3rem;
            margin: 20px 0;
            height: 100px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .computer-choice i {
            opacity: 0;
            transform: scale(0);
            transition: var(--transition);
        }

        .computer-choice.show i {
            opacity: 1;
            transform: scale(1);
        }

        .reset-btn {
            background-color: var(--dark);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 50px;
            font-size: 1rem;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: var(--shadow);
            margin-top: 20px;
        }

        .reset-btn:hover {
            background-color: var(--primary);
            transform: translateY(-3px);
        }

        .reset-btn:active {
            transform: scale(0.95);
        }

        .rules {
            margin-top: 30px;
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: var(--shadow);
            max-width: 800px;
        }

        .rules h2 {
            color: var(--primary);
            margin-bottom: 10px;
        }

        .rules ul {
            list-style-type: none;
            text-align: left;
        }

        .rules li {
            margin-bottom: 8px;
            position: relative;
            padding-left: 25px;
        }

        .rules li::before {
            content: 'â€¢';
            color: var(--primary);
            font-size: 1.5rem;
            position: absolute;
            left: 0;
            top: -5px;
        }

        @media (max-width: 600px) {
            .choices {
                flex-direction: column;
                align-items: center;
                gap: 20px;
            }

            .choice {
                width: 100px;
                height: 100px;
                font-size: 2.5rem;
            }

            h1 {
                font-size: 2rem;
            }
        }

        /* Animation classes */
        .pulse {
            animation: pulse 0.5s ease-in-out;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .shake {
            animation: shake 0.5s ease-in-out;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-10px); }
            75% { transform: translateX(10px); }
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <h1>Rock Paper Scissors</h1>
    
    <div class="game-container">
        <div class="score-board">
            <div class="score">You: <span id="user-score">0</span></div>
            <div class="score">Computer: <span id="computer-score">0</span></div>
        </div>
        
        <div class="choices">
            <div class="choice rock" data-choice="rock">
                <i class="fas fa-hand-rock"></i>
            </div>
            <div class="choice paper" data-choice="paper">
                <i class="fas fa-hand-paper"></i>
            </div>
            <div class="choice scissors" data-choice="scissors">
                <i class="fas fa-hand-scissors"></i>
            </div>
        </div>
        
        <div class="computer-choice">
            <i class="fas fa-question"></i>
        </div>
        
        <div class="result">
            <p class="result-text">Choose your weapon!</p>
        </div>
        
        <button class="reset-btn">Reset Game</button>
    </div>
    
    <div class="rules">
        <h2>Game Rules</h2>
        <ul>
            <li>Rock crushes Scissors</li>
            <li>Scissors cut Paper</li>
            <li>Paper covers Rock</li>
            <li>Same choice results in a tie</li>
        </ul>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const choices = document.querySelectorAll('.choice');
            const computerChoiceDisplay = document.querySelector('.computer-choice i');
            const resultText = document.querySelector('.result-text');
            const userScoreDisplay = document.getElementById('user-score');
            const computerScoreDisplay = document.getElementById('computer-score');
            const resetBtn = document.querySelector('.reset-btn');
            
            let userScore = 0;
            let computerScore = 0;
            const choicesArray = ['rock', 'paper', 'scissors'];
            
            // Game logic
            function playGame(userChoice) {
                // Computer makes random choice
                const computerChoice = choicesArray[Math.floor(Math.random() * 3)];
                
                // Display computer's choice with animation
                computerChoiceDisplay.className = '';
                computerChoiceDisplay.classList.add('fas');
                
                switch(computerChoice) {
                    case 'rock':
                        computerChoiceDisplay.classList.add('fa-hand-rock');
                        break;
                    case 'paper':
                        computerChoiceDisplay.classList.add('fa-hand-paper');
                        break;
                    case 'scissors':
                        computerChoiceDisplay.classList.add('fa-hand-scissors');
                        break;
                }
                
                document.querySelector('.computer-choice').classList.add('show');
                
                // Determine winner
                let result;
                
                if (userChoice === computerChoice) {
                    result = 'It\'s a tie!';
                    resultText.classList.add('shake');
                } else {
                    switch(userChoice) {
                        case 'rock':
                            result = (computerChoice === 'scissors') ? 'You win! Rock crushes Scissors' : 'You lose! Paper covers Rock';
                            break;
                        case 'paper':
                            result = (computerChoice === 'rock') ? 'You win! Paper covers Rock' : 'You lose! Scissors cut Paper';
                            break;
                        case 'scissors':
                            result = (computerChoice === 'paper') ? 'You win! Scissors cut Paper' : 'You lose! Rock crushes Scissors';
                            break;
                    }
                    
                    if (result.includes('win')) {
                        userScore++;
                        resultText.classList.add('pulse');
                    } else {
                        computerScore++;
                        resultText.classList.add('shake');
                    }
                    
                    userScoreDisplay.textContent = userScore;
                    computerScoreDisplay.textContent = computerScore;
                }
                
                resultText.textContent = result;
                
                // Remove animation classes after animation ends
                setTimeout(() => {
                    resultText.classList.remove('pulse', 'shake');
                }, 1000);
            }
            
            // Event listeners
            choices.forEach(choice => {
                choice.addEventListener('click', () => {
                    const userChoice = choice.getAttribute('data-choice');
                    playGame(userChoice);
                });
            });
            
            resetBtn.addEventListener('click', () => {
                userScore = 0;
                computerScore = 0;
                userScoreDisplay.textContent = '0';
                computerScoreDisplay.textContent = '0';
                resultText.textContent = 'Choose your weapon!';
                computerChoiceDisplay.className = 'fas fa-question';
                document.querySelector('.computer-choice').classList.remove('show');
            });
        });
    </script>
</body>
</html>
